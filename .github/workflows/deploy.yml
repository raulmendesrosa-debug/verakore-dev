name: Verakore Website Deployment Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Quality Control & Validation
  quality-control:
    name: Quality Control & Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install schedule
          python --version

      - name: Run character encoding check
        run: python check-encoding.py
        continue-on-error: true

      - name: Run workspace health check
        run: python automation.py startup

      - name: Run comprehensive health check
        run: python automation.py check

      - name: Validate HTML files
        run: |
          echo "Validating HTML structure..."
          for file in *.html; do
            echo "Checking $file"
            python -c "
          import re
          with open('$file', 'r', encoding='utf-8') as f:
              content = f.read()
              # Basic HTML validation
              if '<!DOCTYPE html>' not in content:
                  print('Warning: Missing DOCTYPE in $file')
              if '<html' not in content:
                  print('Error: Missing <html> tag in $file')
              if '</html>' not in content:
                  print('Error: Missing </html> tag in $file')
              print('‚úÖ $file structure looks good')
          "

      - name: Check file sizes
        run: |
          echo "Checking file sizes..."
          find . -name "*.html" -o -name "*.css" -o -name "*.js" | while read file; do
            size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
            if [ "$size" -gt 1048576 ]; then
              echo "Warning: $file is larger than 1MB ($size bytes)"
            else
              echo "‚úÖ $file size OK ($size bytes)"
            fi
          done

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        run: |
          echo "Running security checks..."
          # Check for common security issues
          grep -r "password\|secret\|key" . --include="*.html" --include="*.js" --include="*.py" || echo "No hardcoded secrets found"
          
          # Check for HTTPS usage
          grep -r "http://" . --include="*.html" --include="*.js" || echo "No HTTP links found"
          
          # Check for external script sources
          echo "Checking external script sources..."
          grep -r "src=" . --include="*.html" | grep -v "cdn.jsdelivr.net\|cdnjs.cloudflare.com\|fonts.googleapis.com" || echo "All external sources are trusted CDNs"

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun --upload.target=temporary-public-storage || echo "Lighthouse CI completed with warnings"

  # Build and Deploy
  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: [quality-control, security-scan, performance-test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run pre-deployment checks
        run: python automation.py deploy-check

      - name: Prepare deployment files
        run: |
          echo "Preparing files for deployment..."
          # Create deployment directory
          mkdir -p deploy
          
          # Copy essential files
          cp *.html deploy/
          cp *.toml deploy/
          cp *.json deploy/
          cp *.md deploy/
          cp -r assets deploy/
          cp -r tools deploy/
          
          # Create deployment info
          echo "Deployment Info:" > deploy/DEPLOYMENT_INFO.txt
          echo "Commit: ${{ github.sha }}" >> deploy/DEPLOYMENT_INFO.txt
          echo "Branch: ${{ github.ref_name }}" >> deploy/DEPLOYMENT_INFO.txt
          echo "Timestamp: $(date)" >> deploy/DEPLOYMENT_INFO.txt
          echo "Workflow: ${{ github.workflow }}" >> deploy/DEPLOYMENT_INFO.txt

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: verakore-website
          directory: deploy
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Deployment Success Notification
        if: success()
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üåç Website deployed to Cloudflare Pages"
          echo "üìä Performance tests completed"
          echo "üîí Security scan passed"

      - name: Deployment Failure Notification
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "üìã Check the logs above for details"
          echo "üîÑ Rollback may be required"

  # Post-Deployment Validation
  post-deploy-validation:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Validate deployment
        run: |
          echo "Validating deployment..."
          # Add URL validation here once we have the Cloudflare Pages URL
          echo "‚úÖ Deployment validation completed"

      - name: Update deployment status
        run: |
          echo "üìä Deployment Status: SUCCESS"
          echo "üåç Website: https://verakore-website.pages.dev"
          echo "‚è∞ Deployed at: $(date)"
          echo "üîÑ Next: Monitor performance and user feedback"
